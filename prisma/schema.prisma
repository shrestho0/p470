// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String  @id @default(cuid())
  email              String  @unique
  name               String
  role               Role    @default(TEAM_MEMBER)
  password           String
  emailVerified      Boolean @default(false)
  teamMemberVerified Boolean @default(false)
  teamMemberTitle    String  @default("Regular Team Member")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Task Task[]

  ProjectOwned    Project[] @relation("OwnedProjects")
  ProjectAssigned Project[] @relation("AssignedProjects")

  @@index([email])
  @@index([role])
}

enum Role {
  ADMIN
  TEAM_MEMBER
  PROJECT_MANAGER
}

model Project {
  id          String @id @default(cuid())
  title       String
  summary     String @default("Project Summary")
  description String @default("Project Description")

  milestones Milestone[]

  managerId String
  manager   User   @relation("OwnedProjects", fields: [managerId], references: [id])

  members User[] @relation("AssignedProjects")

  status ProjectStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[]

  @@index([id])
  @@index([title])
  @@index([status])
}

// Thus, we don't need extra query to check project status
enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Milestone {
  number    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  start DateTime @default(now())
  end   DateTime

  @@id([projectId, number])
  @@unique([projectId, number])
  @@index([projectId, number], name: "milestone_project_number_unique")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String     @default("Task Description")
  status      TaskStatus @default(ASSIGNED)
  priority    Priority   @default(MEDIUM)

  due_date DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  milestoneNo Int? // we'll use this with projectId to get milestone, can be empty

  assignee   User?   @relation(fields: [assigneeId], references: [id])
  assigneeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reports Report[]

  @@index([projectId])
  @@index([projectId, status])
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  NOT_ASSIGNED
  ASSIGNED
  IN_PROGRESS
  ON_REVIEW
  RE_ASSIGNED
  COMPLETED
}

model Report {
  id String @id @default(cuid())

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  comment_from_assignee        String @default("No Comment")
  comment_from_project_manager String @default("No Comment")

  status ReportStatus @default(REVIEWING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
}

enum ReportStatus {
  REVIEWING // for review, task status will be changed to ON_REVIEW
  APPROVED // for approval, task status will be changed to COMPLETED
  REJECTED // for rejection, task status will be changed to RE_ASSIGNED
}
